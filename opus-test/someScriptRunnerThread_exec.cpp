/*==============================================================================
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************
#include "stdafx.h"

#include "someState.h"
#include "TestOne.h"

#include "someScriptRunnerThread.h"

namespace Some
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Execute a command line command. It calls one of
// the following specific command execution functions.

void ScriptRunnerThread::execute(Ris::CmdLineCmd* aCmd)
{
   if (aCmd->isCmd("RECORD"))    executeRecord(aCmd);
   if (aCmd->isCmd("PAUSE"))     executePause(aCmd);
   if (aCmd->isCmd("RESUME"))    executeResume(aCmd);
   if (aCmd->isCmd("STOP"))      executeStop(aCmd);
   if (aCmd->isCmd("WAIT"))      executeWait(aCmd);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void ScriptRunnerThread::executeRecord(Ris::CmdLineCmd* aCmd)
{
   Trc::write(10, 0, "executeRecord");
   doRec3(true);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void ScriptRunnerThread::executePause(Ris::CmdLineCmd* aCmd)
{
   Trc::write(10, 0, "executePause");
   doPause3();
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void ScriptRunnerThread::executeResume(Ris::CmdLineCmd* aCmd)
{
   Trc::write(10, 0, "executeResume");
   doResume3();
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void ScriptRunnerThread::executeStop(Ris::CmdLineCmd* aCmd)
{
   Trc::write(10, 0, "executeStop");
   doStopRec3();
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void ScriptRunnerThread::executeWait(Ris::CmdLineCmd* aCmd)
{
   int tDelay = (int)aCmd->argDouble(1) * 1000;
   Prn::print(Prn::Show1, 0, "Wait %d", tDelay);
   Trc::write(10, 0, "executeWait %d", tDelay);

   mNotify.waitForTimer(tDelay);

}

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace